-- Copyright (C) Kong Inc.
local timestamp = require "kong.tools.timestamp"
local policies = require "kong.plugins.consumer-rate-limiting.policies"
local kong_meta = require "kong.meta"

local kong = kong
local ngx = ngx
local max = math.max
local time = ngx.time
local floor = math.floor
local pairs = pairs
local error = error
local tostring = tostring
local timer_at = ngx.timer.at

local EMPTY = {}
local EXPIRATION = require "kong.plugins.consumer-rate-limiting.expiration"


local CONSUMER_RATELIMIT_LIMIT     = "Consumer-RateLimit-Limit"
local CONSUMER_RATELIMIT_REMAINING = "Consumer-RateLimit-Remaining"
local CONSUMER_RATELIMIT_RESET     = "Consumer-RateLimit-Reset"
local CONSUMER_RETRY_AFTER         = "Consumer-Retry-After"


local X_CONSUMER_RATELIMIT_LIMIT = {
  second = "X-Consumer-RateLimit-Limit-Second",
  minute = "X-Consumer-RateLimit-Limit-Minute",
  hour   = "X-Consumer-RateLimit-Limit-Hour",
  day    = "X-Consumer-RateLimit-Limit-Day",
  month  = "X-Consumer-RateLimit-Limit-Month",
  year   = "X-Consumer-RateLimit-Limit-Year",
}

local X_CONSUMER_RATELIMIT_REMAINING = {
  second = "X-Consumer-RateLimit-Remaining-Second",
  minute = "X-Consumer-RateLimit-Remaining-Minute",
  hour   = "X-Consumer-RateLimit-Remaining-Hour",
  day    = "X-Consumer-RateLimit-Remaining-Day",
  month  = "X-Consumer-RateLimit-Remaining-Month",
  year   = "X-Consumer-RateLimit-Remaining-Year",
}


local ConsumerRateLimitingHandler = {}


ConsumerRateLimitingHandler.VERSION = kong_meta.version
ConsumerRateLimitingHandler.PRIORITY = 910


local function get_identifier(conf)

  local identifier = (kong.client.get_consumer() or kong.client.get_credential() or EMPTY).id

  return identifier or kong.client.get_forwarded_ip()
end


local function get_usage(conf, identifier, current_timestamp, limits)
  local usage = {}
  local stop

  for period, limit in pairs(limits) do
    local current_usage, err = policies[conf.policy].usage(conf, identifier, period, current_timestamp)
    if err then
      return nil, nil, err
    end

    -- What is the current usage for the configured limit name?
    local remaining = limit - current_usage

    -- Recording usage
    usage[period] = {
      limit = limit,
      remaining = remaining,
    }

    if remaining <= 0 then
      stop = period
    end
  end

  return usage, stop
end


local function increment(premature, conf, ...)
  if premature then
    return
  end

  policies[conf.policy].increment(conf, ...)
end

local function ratelimting(conf)

  local current_timestamp = time() * 1000

  -- Consumer is identified by authenticated_credential id or authenticated_credential id
  local identifier = get_identifier(conf)
  local fault_tolerant = conf.fault_tolerant

  -- Load current metric for configured period
  local limits = {
    second = conf.second,
    minute = conf.minute,
    hour = conf.hour,
    day = conf.day,
    month = conf.month,
    year = conf.year,
  }

  local usage, stop, err = get_usage(conf, identifier, current_timestamp, limits)
  if err then
    if not fault_tolerant then
      return error(err)
    end

    kong.log.err("failed to get usage: ", tostring(err))
  end

  if usage then
    -- Adding headers
    local reset
    local headers
    if not conf.hide_client_headers then
      headers = {}
      local timestamps
      local limit
      local window
      local remaining
      for k, v in pairs(usage) do
        local current_limit = v.limit
        local current_window = EXPIRATION[k]
        local current_remaining = v.remaining
        if stop == nil or stop == k then
          current_remaining = current_remaining - 1
        end
        current_remaining = max(0, current_remaining)

        if not limit or (current_remaining < remaining)
                     or (current_remaining == remaining and
                         current_window > window)
        then
          limit = current_limit
          window = current_window
          remaining = current_remaining

          if not timestamps then
            timestamps = timestamp.get_timestamps(current_timestamp)
          end

          reset = max(1, window - floor((current_timestamp - timestamps[k]) / 1000))
        end

        headers[X_CONSUMER_RATELIMIT_LIMIT[k]] = current_limit
        headers[X_CONSUMER_RATELIMIT_REMAINING[k]] = current_remaining
      end

      headers[CONSUMER_RATELIMIT_LIMIT] = limit
      headers[CONSUMER_RATELIMIT_REMAINING] = remaining
      headers[CONSUMER_RATELIMIT_RESET] = reset
    end

    -- If limit is exceeded, terminate the request
    if stop then
      headers = headers or {}
      headers[CONSUMER_RETRY_AFTER] = reset
      return kong.response.error(429, "API rate limit exceeded", headers)
    end

    if headers then
      kong.response.set_headers(headers)
    end
  end

  local ok, err = timer_at(0, increment, conf, limits, identifier, current_timestamp, 1)
  if not ok then
    kong.log.err("failed to create timer: ", err)
  end

end


function ConsumerRateLimitingHandler:access(conf)


  -- Extract the service and the route id/name details
  local service_id = kong.router.get_service().id
  local service_name = kong.router.get_service().name
  local route_id = kong.router.get_route().id
  local route_name = kong.router.get_route().name

  local route_flag = false
  local service_flag = false

  if conf.route then
    for i, _ in ipairs(conf.route) do

      local config_route_name = conf.route[i].name:lower()

      if config_route_name == route_name then
        route_flag = true
        -- mapping the custom rate limit values to the conf rate limit parameters
        conf.second = conf.route[i].second
        conf.minute = conf.route[i].minute
        conf.hour = conf.route[i].hour
        conf.day = conf.route[i].day
        conf.month = conf.route[i].month
        conf.year = conf.route[i].year
        conf.route_id = route_id
      end
    end
  end

 -- Route takes precendence over service, so validation is performed before executing service block
  if not route_flag and conf.service then 

    for i, _ in ipairs(conf.service) do

      local config_svc_name = conf.service[i].name:lower()

      if config_svc_name == service_name then
        service_flag = true
        -- mapping the custom rate limit values to the conf rate limit parameters
        conf.second = conf.service[i].second
        conf.minute = conf.service[i].minute
        conf.hour = conf.service[i].hour
        conf.day = conf.service[i].day
        conf.month = conf.service[i].month
        conf.year = conf.service[i].year
        conf.service_id = service_id
      end
    end

  end

  if route_flag or service_flag then
    ratelimting(conf)
  else
    return
  end

end


return ConsumerRateLimitingHandler
